local Library = loadstring(game:HttpGet("https://raw.githubusercontent.com/sigmaboi4167-code/Linoria-Gui-Execly.gay-Gui/refs/heads/main/Linorialib", true))()
local ThemeManager = loadstring(game:HttpGet('https://raw.githubusercontent.com/violin-suzutsuki/LinoriaLib/main/addons/ThemeManager.lua'))()
local SaveManager = loadstring(game:HttpGet('https://raw.githubusercontent.com/violin-suzutsuki/LinoriaLib/main/addons/SaveManager.lua'))()

local Window = Library:CreateWindow({
    Title = 'Execly.gay',
    Center = true,
    AutoShow = true,
    TabPadding = 8,
    MenuFadeTime = 0.2
})

local Tabs = {
    Combat = Window:AddTab('Combat'),
    Visuals = Window:AddTab('Visuals'),
    World = Window:AddTab('World'),
    ['UI Settings'] = Window:AddTab('UI Settings'),
}

local LeftGroupBox = Tabs.Combat:AddLeftGroupbox('Groupbox')

LeftGroupBox:AddToggle('MyToggle', {
    Text = 'This is a toggle',
    Default = true,
    Tooltip = 'This is a tooltip',
    Callback = function(Value)
        print('[cb] MyToggle changed to:', Value)
    end
})

Toggles.MyToggle:OnChanged(function()
    print('MyToggle changed to:', Toggles.MyToggle.Value)
end)
Toggles.MyToggle:SetValue(false)

local MyButton = LeftGroupBox:AddButton({
    Text = 'Button',
    Func = function()
        print('You clicked a button!')
    end,
    DoubleClick = false,
    Tooltip = 'This is the main button'
})

local MyButton2 = MyButton:AddButton({
    Text = 'Sub button',
    Func = function()
        print('You clicked a sub button!')
    end,
    DoubleClick = true,
    Tooltip = 'This is the sub button (double click me!)'
})

LeftGroupBox:AddLabel('This is a label')
LeftGroupBox:AddLabel('This is a label\n\nwhich wraps its text!', true)
LeftGroupBox:AddDivider()

LeftGroupBox:AddSlider('MySlider', {
    Text = 'This is my slider!',
    Default = 0,
    Min = 0,
    Max = 5,
    Rounding = 1,
    Compact = false,
    Callback = function(Value)
        print('[cb] MySlider was changed! New value:', Value)
    end
})

Options.MySlider:OnChanged(function()
    print('MySlider was changed! New value:', Options.MySlider.Value)
end)
Options.MySlider:SetValue(3)

LeftGroupBox:AddInput('MyTextbox', {
    Default = 'My textbox!',
    Numeric = false,
    Finished = false,
    Text = 'This is a textbox',
    Tooltip = 'This is a tooltip',
    Placeholder = 'Placeholder text',
    Callback = function(Value)
        print('[cb] Text updated. New text:', Value)
    end
})

Options.MyTextbox:OnChanged(function()
    print('Text updated. New text:', Options.MyTextbox.Value)
end)

LeftGroupBox:AddDropdown('MyDropdown', {
    Values = { 'This', 'is', 'a', 'dropdown' },
    Default = 1,
    Multi = false,
    Text = 'A dropdown',
    Tooltip = 'This is a tooltip',
    Callback = function(Value)
        print('[cb] Dropdown got changed. New value:', Value)
    end
})

Options.MyDropdown:OnChanged(function()
    print('Dropdown got changed. New value:', Options.MyDropdown.Value)
end)
Options.MyDropdown:SetValue('This')

LeftGroupBox:AddDropdown('MyMultiDropdown', {
    Values = { 'This', 'is', 'a', 'dropdown' },
    Default = 1,
    Multi = true,
    Text = 'A dropdown',
    Tooltip = 'This is a tooltip',
    Callback = function(Value)
        print('[cb] Multi dropdown got changed:', Value)
    end
})

Options.MyMultiDropdown:OnChanged(function()
    print('Multi dropdown got changed:')
    for key, value in next, Options.MyMultiDropdown.Value do
        print(key, value)
    end
end)
Options.MyMultiDropdown:SetValue({
    This = true,
    is = true,
})

LeftGroupBox:AddDropdown('MyPlayerDropdown', {
    SpecialType = 'Player',
    Text = 'A player dropdown',
    Tooltip = 'This is a tooltip',
    Callback = function(Value)
        print('[cb] Player dropdown got changed:', Value)
    end
})

LeftGroupBox:AddLabel('Color'):AddColorPicker('ColorPicker', {
    Default = Color3.new(0, 1, 0),
    Title = 'Some color',
    Transparency = 0,
    Callback = function(Value)
        print('[cb] Color changed!', Value)
    end
})

--  div

Options.ColorPicker:OnChanged(function()
    print('Color changed!', Options.ColorPicker.Value)
    print('Transparency changed!', Options.ColorPicker.Transparency)
end)
Options.ColorPicker:SetValueRGB(Color3.fromRGB(0, 255, 140))

LeftGroupBox:AddLabel('Keybind'):AddKeyPicker('KeyPicker', {
    Default = 'MB2',
    SyncToggleState = false,
    Mode = 'Toggle',
    Text = 'Auto lockpick safes',
    NoUI = false,
    Callback = function(Value)
        print('[cb] Keybind clicked!', Value)
    end,
    ChangedCallback = function(New)
        print('[cb] Keybind changed!', New)
    end
})

Options.KeyPicker:OnClick(function()
    print('Keybind clicked!', Options.KeyPicker:GetState())
end)

Options.KeyPicker:OnChanged(function()
    print('Keybind changed!', Options.KeyPicker.Value)
end)

task.spawn(function()
    while true do
        wait(1)
        local state = Options.KeyPicker:GetState()
        if state then
            print('KeyPicker is being held down')
        end
        if Library.Unloaded then break end
    end
end)

Options.KeyPicker:SetValue({ 'MB2', 'Toggle' })

local LeftGroupBox2 = Tabs.Combat:AddLeftGroupbox('Groupbox #2')
LeftGroupBox2:AddLabel('Oh no...\nThis label spans multiple lines!\n\nWe\'re gonna run out of UI space...\nJust kidding! Scroll down!\n\n\nHello from below!', true)

local TabBox = Tabs.Combat:AddRightTabbox()
local Tab1 = TabBox:AddTab('Tab 1')
Tab1:AddToggle('Tab1Toggle', { Text = 'Tab1 Toggle' })

local Tab2 = TabBox:AddTab('Tab 2')
Tab2:AddToggle('Tab2Toggle', { Text = 'Tab2 Toggle' })

local RightGroupbox = Tabs.Combat:AddRightGroupbox('Groupbox #3')
RightGroupbox:AddToggle('ControlToggle', { Text = 'Dependency box toggle' })

local Depbox = RightGroupbox:AddDependencyBox()
Depbox:AddToggle('DepboxToggle', { Text = 'Sub-dependency box toggle' })

local SubDepbox = Depbox:AddDependencyBox()
SubDepbox:AddSlider('DepboxSlider', { Text = 'Slider', Default = 50, Min = 0, Max = 100, Rounding = 0 })
SubDepbox:AddDropdown('DepboxDropdown', { Text = 'Dropdown', Default = 1, Values = {'a', 'b', 'c'} })

Depbox:SetupDependencies({ { Toggles.ControlToggle, true } })
SubDepbox:SetupDependencies({ { Toggles.DepboxToggle, true } })

local TabBox = Tabs.Visuals:AddLeftTabbox() -- tabs for ESP switch sides (switched the sides)

-- Player ESP tab and toggles
local Tab1 = TabBox:AddTab('Player ESP')
Tab1:AddToggle('PlayerESPEnableToggle', { Text = 'Enable' })
Tab1:AddToggle('PlayerESPBoxToggle', { Text = 'Box' })
Tab1:AddToggle('PlayerESPNameToggle', { Text = 'Username/Name Tags' })
Tab1:AddToggle('PlayerESPSkeletonToggle', { Text = 'Skeleton' })
Tab1:AddToggle('PlayerESPDistToggle', { Text = 'Distance' })
Tab1:AddToggle('PlayerESPWeaponToggle', { Text = 'Weapon (No Display)' })
Tab1:AddToggle('PlayerESPChamsToggle', { Text = 'Chams' })
Tab1:AddToggle('PlayerESPLookDirToggle', { Text = 'Look Direction' })
Tab1:AddToggle('PlayerESPHealthToggle', { Text = 'Health' })
Tab1:AddToggle('PlayerESPTracersToggle', { Text = 'Tracers' })

-- Object ESP tab and toggles
local Tab2 = TabBox:AddTab('Object ESP')
Tab2:AddToggle('ObjectESPEnableToggle', { Text = 'Enable' })
-- dropdown
Tab2:AddDropdown('MyMultiDropdown', {
    Values = { 'Stone', 'Iron', 'Nitrate', 'TC', 'Cabinet', 'ATV',  },
    Default = 1,
    Multi = true,
    Text = 'Objects',
    Tooltip = 'Select multiple objects',
    Callback = function(Value)
        print('[cb] Multi dropdown got changed:', Value)
    end
})
Tab2:AddToggle('ObjectESPchamsToggle', { Text = 'Chams' })
Tab2:AddToggle('ObjectESPnamesToggle', { Text = 'Names' })
Tab2:AddToggle('ObjectESPdistanceToggle', { Text = 'Distance' })
Tab2:AddToggle('ObjectESPtracersToggle', { Text = 'Tracers' })

local GroupBox = Tabs.Visuals:AddRightGroupbox('Field Of View')


GroupBox:AddToggle('MyToggle', {
    Text = 'Enable',
    Default = true,
    Tooltip = 'Enable the following',
    Callback = function(Value)
        print('[cb] MyToggle changed to:', Value)
    end
})


GroupBox:AddToggle('MyToggle', {
    Text = 'FOV',
    Default = true,
    Tooltip = 'Change your field of view',
    Callback = function(Value)
        print('[cb] MyToggle changed to:', Value)
    end
})

GroupBox:AddSlider('MySlider', {
    Text = '***',
    Default = 0,
    Min = 60,
    Max = 120,
    Rounding = 1,
    Compact = false,
    Callback = function(Value)
        print('[cb] MySlider was changed! New value:', Value)
    end
})

Options.MySlider:OnChanged(function()
    print('MySlider was changed! New value:', Options.MySlider.Value)
end)
Options.MySlider:SetValue(3)

local GroupBox = Tabs.World:AddLeftGroupbox('MISC')

















Options.MyMultiDropdown:OnChanged(function()
    print('Multi dropdown got changed:')
    for key, value in next, Options.MyMultiDropdown.Value do
        print(key, value)
    end
end)
Options.MyMultiDropdown:SetValue({
    This = true,
    is = true,
})
--drop down




local RunService = game:GetService("RunService")
local watermarkEnabled = true
local watermarkText = Drawing.new("Text")
watermarkText.ZIndex = 2
watermarkText.Transparency = 1
watermarkText.Outline = true
watermarkText.OutlineColor = Color3.new()
watermarkText.Font = Drawing.Fonts.UI
watermarkText.Size = 18

local watermarkBox = Drawing.new("Square")
watermarkBox.ZIndex = 1
watermarkBox.Filled = true
watermarkBox.Color = Color3.new(0, 0, 0)
watermarkBox.Transparency = 0.5

local fpstimer, fps, finalfps = tick(), 0, 60
RunService.RenderStepped:Connect(function()
    fps = fps + 1
    if fpstimer + 1 <= tick() then
        fpstimer = tick()
        finalfps = fps
        fps = 0
    end

    local hue = (tick() % 5) / 5
    watermarkText.Color = Color3.fromHSV(hue, 1, 1)

    watermarkText.Text = ("Execly.gay | %s | %s fps"):format(
        os.date("%b %d %Y"),
        tostring(finalfps)
    )

    local pos = Vector2.new(10, 10)
    watermarkText.Position = pos

    watermarkBox.Position = pos - Vector2.new(5, 5)
    watermarkBox.Size = Vector2.new(watermarkText.TextBounds.X + 10, watermarkText.TextBounds.Y + 10)

    watermarkText.Visible = watermarkEnabled
    watermarkBox.Visible = watermarkEnabled
end)

Library.KeybindFrame.Visible = true

Library:OnUnload(function()
    watermarkText:Remove()
    watermarkBox:Remove()
    if _G.UnloadESP then _G.UnloadESP() end
    print('Unloaded!')
    Library.Unloaded = true
end)

local MenuGroup = Tabs['UI Settings']:AddLeftGroupbox('Menu')
MenuGroup:AddButton('Unload', function() Library:Unload() end)
MenuGroup:AddLabel('Menu bind'):AddKeyPicker('MenuKeybind', { Default = 'End', NoUI = true, Text = 'Menu keybind' })
MenuGroup:AddToggle('KeybindVisibility', {
    Text = 'Show Keybind Frame',
    Default = true,
    Tooltip = 'Toggle visibility of the keybind frame',
    Callback = function(Value)
        Library.KeybindFrame.Visible = Value
        print('[cb] Keybind frame visibility changed to:', Value)
    end
})

LeftGroupBox:AddDropdown('MyMultiDropdown', {
    Values = { 'This', 'is', 'a', 'dropdown' },
    Default = 1,
    Multi = true,
    Text = 'A dropdown',
    Tooltip = 'This is a tooltip',
    Callback = function(Value)
        print('[cb] Multi dropdown got changed:', Value)
    end
})





Library.ToggleKeybind = Options.MenuKeybind

ThemeManager:SetLibrary(Library)
SaveManager:SetLibrary(Library)

SaveManager:IgnoreThemeSettings()
SaveManager:SetIgnoreIndexes({ 'MenuKeybind' })

ThemeManager:SetFolder('ExeclyGayModded')
SaveManager:SetFolder('ExeclyGayModded/game')

SaveManager:BuildConfigSection(Tabs['UI Settings'])
ThemeManager:ApplyToTab(Tabs['UI Settings'])

SaveManager:LoadAutoloadConfig()
